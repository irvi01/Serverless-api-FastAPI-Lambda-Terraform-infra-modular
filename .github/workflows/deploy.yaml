name: deploy-infra-and-api

on:
  push:
    branches: [ "main" ]
  workflow_dispatch:

permissions:
  id-token: write   # necessÃ¡rio pro OIDC
  contents: read

env:
  AWS_REGION: ${{ secrets.AWS_REGION }}
  AWS_ACCOUNT_ID: ${{ secrets.AWS_ACCOUNT_ID }}
  TF_STATE_BUCKET: ${{ secrets.TF_STATE_BUCKET }}
  TF_STATE_TABLE: ${{ secrets.TF_STATE_TABLE }}
  TF_STATE_KEY: ${{ secrets.TF_STATE_KEY }}
  AWS_ROLE_TO_ASSUME: ${{ secrets.AWS_ROLE_TO_ASSUME }}

jobs:
  deploy:
    runs-on: ubuntu-latest
    concurrency:
      group: tf-state-${{ github.ref }}
      cancel-in-progress: false

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'

      - name: Install deps (for packaging)
        run: |
          python -m pip install --upgrade pip
          pip install -r app/requirements.txt

      - name: Package FastAPI (Lambda)
        run: |
          chmod +x scripts/package.sh
          ./scripts/package.sh

      - name: Configure AWS credentials via OIDC
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ env.AWS_ROLE_TO_ASSUME }}
          aws-region: ${{ env.AWS_REGION }}

      - name: WhoAmI
        run: aws sts get-caller-identity

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_wrapper: false

      - name: Terraform Init (S3 backend + DDB)
        working-directory: infra
        run: |
          terraform init \
            -backend-config="bucket=${TF_STATE_BUCKET}" \
            -backend-config="key=${TF_STATE_KEY}" \
            -backend-config="region=${AWS_REGION}" \
            -backend-config="dynamodb_table=${TF_STATE_TABLE}" \
            -backend-config="encrypt=true"

      - name: Terraform Validate
        working-directory: infra
        run: terraform validate

      - name: Debug TF state (lista recursos)
        working-directory: infra
        run: |
            terraform state list || echo "state vazio"

      - name: Terraform Plan
        working-directory: infra
        run: terraform plan -var="region=${AWS_REGION}" -var="package_zip=../package.zip"

      - name: Terraform Apply
        working-directory: infra
        run: terraform apply -auto-approve -var="region=${AWS_REGION}" -var="package_zip=../package.zip"

      - name: Capture outputs (mask API key)
        id: tfout
        working-directory: infra
        shell: bash
        run: |
          API_URL=$(terraform output -raw api_url)
          API_KEY=$(terraform output -raw api_key)
          echo "::add-mask::$API_KEY"
          echo "API_URL=$API_URL" >> $GITHUB_ENV
          echo "API_KEY=$API_KEY" >> $GITHUB_ENV

      - name: Smoke test /health
        run: |
            set -euo pipefail
            for i in {1..5}; do
            echo "Attempt $i: $API_URL/health"
            if curl -fsS -H "x-api-key: $API_KEY" "$API_URL/health" \
            | tee /dev/stderr \
            | jq -e '.status=="ok"' >/dev/null; then
            exit 0
            fi
            sleep 3
            done
            echo "Healthcheck failed after retries" >&2
            exit 1

      - name: Smoke test /hello
        run: |
            set -euo pipefail
            MSG=$(curl -fsS -H "x-api-key: $API_KEY" "$API_URL/hello?name=CI" | tee /dev/stderr | jq -r '.message')
            echo "Message: $MSG"
            # aceita com ou sem '!'
            echo "$MSG" | grep -E '^Hello, CI!?$' >/dev/null
 