#!/bin/bash
set -euo pipefail # Exit em qualquer erro, vari√°veis n√£o definidas ou falha em pipes

# Variaveis de caminho
# ROOT_DIR √© a raiz do reposit√≥rio, BUILD_DIR √© onde as depend√™ncias e c√≥digo ser√£o empacotados,
# ZIP_FILE √© o arquivo zip final, APP_DIR √© onde o c√≥digo da aplica√ß√£o est√° localizado,
# e REQ_FILE √© o arquivo de requisitos do Python.  
ROOT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")/.." && pwd)"  
BUILD_DIR="$ROOT_DIR/build"
ZIP_FILE="$ROOT_DIR/package.zip"
APP_DIR="$ROOT_DIR/app"
REQ_FILE="$APP_DIR/requirements.txt"

echo "üì¶ Empacotando Lambda a partir de: $ROOT_DIR"

# Limpeza anterior
rm -rf "$BUILD_DIR"
rm -f "$ZIP_FILE"

# Verifica√ß√µes b√°sicas para garantir que tudo est√° no lugar e as ferramentas necess√°rias est√£o instaladas
command -v zip >/dev/null 2>&1 || { echo "‚ùå 'zip' n√£o encontrado. Instale: sudo apt install -y zip"; exit 1; }
test -f "$REQ_FILE" || { echo "‚ùå $REQ_FILE n√£o existe"; exit 1; }
test -f "$APP_DIR/api.py" -o -f "$APP_DIR/main.py" || { echo "‚ùå app/api.py n√£o encontrado"; exit 1; }

# Instala depend√™ncias no diret√≥rio de build 
mkdir -p "$BUILD_DIR"
python -m pip install --upgrade pip >/dev/null
python -m pip install --target "$BUILD_DIR" -r "$REQ_FILE"

# Copia o c√≥digo
cp -r "$APP_DIR/"* "$BUILD_DIR/"

# Higiene
find "$BUILD_DIR" -type d -name "__pycache__" -prune -exec rm -rf {} +

# Cria o zip na raiz do repo
(
  cd "$BUILD_DIR"
  zip -rq "$ZIP_FILE" .
)
echo "Pacote gerado: $ZIP_FILE"
